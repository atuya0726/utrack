// Mocks generated by Mockito 5.4.4 from annotations
// in utrack/test/mock/notifier.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i10;

import 'package:firebase_auth/firebase_auth.dart' as _i3;
import 'package:flutter_riverpod/flutter_riverpod.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:state_notifier/state_notifier.dart' as _i12;
import 'package:utrack/model/constants.dart' as _i11;
import 'package:utrack/model/class.dart' as _i14;
import 'package:utrack/model/task.dart' as _i8;
import 'package:utrack/usecase/class_usecase.dart' as _i4;
import 'package:utrack/usecase/task_usecase.dart' as _i2;
import 'package:utrack/usecase/timetable_usecase.dart' as _i5;
import 'package:utrack/viewmodel/class.dart' as _i13;
import 'package:utrack/viewmodel/task.dart' as _i6;
import 'package:utrack/viewmodel/timetable.dart' as _i15;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTaskUsecase_0 extends _i1.SmartFake implements _i2.TaskUsecase {
  _FakeTaskUsecase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseAuth_1 extends _i1.SmartFake implements _i3.FirebaseAuth {
  _FakeFirebaseAuth_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_2 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeClassUsecase_3 extends _i1.SmartFake implements _i4.ClassUsecase {
  _FakeClassUsecase_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTimetableUsecase_4 extends _i1.SmartFake
    implements _i5.TimetableUsecase {
  _FakeTimetableUsecase_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TaskNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskNotifier extends _i1.Mock implements _i6.TaskNotifier {
  @override
  _i2.TaskUsecase get taskUsecase => (super.noSuchMethod(
        Invocation.getter(#taskUsecase),
        returnValue: _FakeTaskUsecase_0(
          this,
          Invocation.getter(#taskUsecase),
        ),
        returnValueForMissingStub: _FakeTaskUsecase_0(
          this,
          Invocation.getter(#taskUsecase),
        ),
      ) as _i2.TaskUsecase);

  @override
  set taskUsecase(_i2.TaskUsecase? _taskUsecase) => super.noSuchMethod(
        Invocation.setter(
          #taskUsecase,
          _taskUsecase,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.FirebaseAuth get firebaseAuth => (super.noSuchMethod(
        Invocation.getter(#firebaseAuth),
        returnValue: _FakeFirebaseAuth_1(
          this,
          Invocation.getter(#firebaseAuth),
        ),
        returnValueForMissingStub: _FakeFirebaseAuth_1(
          this,
          Invocation.getter(#firebaseAuth),
        ),
      ) as _i3.FirebaseAuth);

  @override
  set firebaseAuth(_i3.FirebaseAuth? _firebaseAuth) => super.noSuchMethod(
        Invocation.setter(
          #firebaseAuth,
          _firebaseAuth,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set user(_i3.User? _user) => super.noSuchMethod(
        Invocation.setter(
          #user,
          _user,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get userId => (super.noSuchMethod(
        Invocation.getter(#userId),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#userId),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#userId),
        ),
      ) as String);

  @override
  set userId(String? _userId) => super.noSuchMethod(
        Invocation.setter(
          #userId,
          _userId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i8.TaskModel> get originTasks => (super.noSuchMethod(
        Invocation.getter(#originTasks),
        returnValue: <_i8.TaskModel>[],
        returnValueForMissingStub: <_i8.TaskModel>[],
      ) as List<_i8.TaskModel>);

  @override
  set originTasks(List<_i8.TaskModel>? _originTasks) => super.noSuchMethod(
        Invocation.setter(
          #originTasks,
          _originTasks,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onError(_i9.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i10.Stream<List<_i8.TaskModel>> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i10.Stream<List<_i8.TaskModel>>.empty(),
        returnValueForMissingStub: _i10.Stream<List<_i8.TaskModel>>.empty(),
      ) as _i10.Stream<List<_i8.TaskModel>>);

  @override
  List<_i8.TaskModel> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: <_i8.TaskModel>[],
        returnValueForMissingStub: <_i8.TaskModel>[],
      ) as List<_i8.TaskModel>);

  @override
  set state(List<_i8.TaskModel>? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i8.TaskModel> get debugState => (super.noSuchMethod(
        Invocation.getter(#debugState),
        returnValue: <_i8.TaskModel>[],
        returnValueForMissingStub: <_i8.TaskModel>[],
      ) as List<_i8.TaskModel>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i10.Future<void> waitForInitialization() => (super.noSuchMethod(
        Invocation.method(
          #waitForInitialization,
          [],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  void fetchTasks() => super.noSuchMethod(
        Invocation.method(
          #fetchTasks,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.Future<void> addTask({
    required String? classId,
    required String? name,
    required DateTime? deadline,
    required _i11.HowToSubmit? howToSubmit,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [],
          {
            #classId: classId,
            #name: name,
            #deadline: deadline,
            #howToSubmit: howToSubmit,
          },
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<void> deleteTask({required String? taskId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [],
          {#taskId: taskId},
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<void> updateTaskStatus({
    required String? taskId,
    required _i11.TaskStatus? status,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTaskStatus,
          [],
          {
            #taskId: taskId,
            #status: status,
          },
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<void> filterTasks({
    String? classId,
    _i11.TaskStatus? status,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #filterTasks,
          [],
          {
            #classId: classId,
            #status: status,
          },
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  String calcRemainingDays({required DateTime? datetime}) =>
      (super.noSuchMethod(
        Invocation.method(
          #calcRemainingDays,
          [],
          {#datetime: datetime},
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #calcRemainingDays,
            [],
            {#datetime: datetime},
          ),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #calcRemainingDays,
            [],
            {#datetime: datetime},
          ),
        ),
      ) as String);

  @override
  DateTime nextWeekAt2359({required _i11.Week? dayOfWeek}) =>
      (super.noSuchMethod(
        Invocation.method(
          #nextWeekAt2359,
          [],
          {#dayOfWeek: dayOfWeek},
        ),
        returnValue: _FakeDateTime_2(
          this,
          Invocation.method(
            #nextWeekAt2359,
            [],
            {#dayOfWeek: dayOfWeek},
          ),
        ),
        returnValueForMissingStub: _FakeDateTime_2(
          this,
          Invocation.method(
            #nextWeekAt2359,
            [],
            {#dayOfWeek: dayOfWeek},
          ),
        ),
      ) as DateTime);

  @override
  DateTime nextWeekClassStartTime({
    required _i11.Week? dayOfWeek,
    required _i11.Period? period,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #nextWeekClassStartTime,
          [],
          {
            #dayOfWeek: dayOfWeek,
            #period: period,
          },
        ),
        returnValue: _FakeDateTime_2(
          this,
          Invocation.method(
            #nextWeekClassStartTime,
            [],
            {
              #dayOfWeek: dayOfWeek,
              #period: period,
            },
          ),
        ),
        returnValueForMissingStub: _FakeDateTime_2(
          this,
          Invocation.method(
            #nextWeekClassStartTime,
            [],
            {
              #dayOfWeek: dayOfWeek,
              #period: period,
            },
          ),
        ),
      ) as DateTime);

  @override
  bool updateShouldNotify(
    List<_i8.TaskModel>? old,
    List<_i8.TaskModel>? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i9.RemoveListener addListener(
    _i12.Listener<List<_i8.TaskModel>>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
        returnValueForMissingStub: () {},
      ) as _i9.RemoveListener);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ClassNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockClassNotifier extends _i1.Mock implements _i13.ClassNotifier {
  @override
  _i4.ClassUsecase get classUsecase => (super.noSuchMethod(
        Invocation.getter(#classUsecase),
        returnValue: _FakeClassUsecase_3(
          this,
          Invocation.getter(#classUsecase),
        ),
        returnValueForMissingStub: _FakeClassUsecase_3(
          this,
          Invocation.getter(#classUsecase),
        ),
      ) as _i4.ClassUsecase);

  @override
  set classUsecase(_i4.ClassUsecase? _classUsecase) => super.noSuchMethod(
        Invocation.setter(
          #classUsecase,
          _classUsecase,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i14.ClassModel> get originClasses => (super.noSuchMethod(
        Invocation.getter(#originClasses),
        returnValue: <_i14.ClassModel>[],
        returnValueForMissingStub: <_i14.ClassModel>[],
      ) as List<_i14.ClassModel>);

  @override
  set originClasses(List<_i14.ClassModel>? _originClasses) =>
      super.noSuchMethod(
        Invocation.setter(
          #originClasses,
          _originClasses,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onError(_i9.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i10.Stream<List<_i14.ClassModel>> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i10.Stream<List<_i14.ClassModel>>.empty(),
        returnValueForMissingStub: _i10.Stream<List<_i14.ClassModel>>.empty(),
      ) as _i10.Stream<List<_i14.ClassModel>>);

  @override
  List<_i14.ClassModel> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: <_i14.ClassModel>[],
        returnValueForMissingStub: <_i14.ClassModel>[],
      ) as List<_i14.ClassModel>);

  @override
  set state(List<_i14.ClassModel>? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i14.ClassModel> get debugState => (super.noSuchMethod(
        Invocation.getter(#debugState),
        returnValue: <_i14.ClassModel>[],
        returnValueForMissingStub: <_i14.ClassModel>[],
      ) as List<_i14.ClassModel>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i10.Future<void> waitForInitialization() => (super.noSuchMethod(
        Invocation.method(
          #waitForInitialization,
          [],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  void fetchClasses() => super.noSuchMethod(
        Invocation.method(
          #fetchClasses,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.Future<void> searchClasses({
    required String? text,
    required _i11.Week? dayOfWeek,
    required _i11.Period? period,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchClasses,
          [],
          {
            #text: text,
            #dayOfWeek: dayOfWeek,
            #period: period,
          },
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<void> filterClasses({
    required _i11.Grade? grade,
    required _i11.Period? period,
    required _i11.Week? dayOfWeek,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #filterClasses,
          [],
          {
            #grade: grade,
            #period: period,
            #dayOfWeek: dayOfWeek,
          },
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<String> getNameById({required String? classId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNameById,
          [],
          {#classId: classId},
        ),
        returnValue: _i10.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #getNameById,
            [],
            {#classId: classId},
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #getNameById,
            [],
            {#classId: classId},
          ),
        )),
      ) as _i10.Future<String>);

  @override
  bool updateShouldNotify(
    List<_i14.ClassModel>? old,
    List<_i14.ClassModel>? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i9.RemoveListener addListener(
    _i12.Listener<List<_i14.ClassModel>>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
        returnValueForMissingStub: () {},
      ) as _i9.RemoveListener);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [TimetableNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockTimetableNotifier extends _i1.Mock implements _i15.TimetableNotifier {
  @override
  _i5.TimetableUsecase get timetableUsecase => (super.noSuchMethod(
        Invocation.getter(#timetableUsecase),
        returnValue: _FakeTimetableUsecase_4(
          this,
          Invocation.getter(#timetableUsecase),
        ),
        returnValueForMissingStub: _FakeTimetableUsecase_4(
          this,
          Invocation.getter(#timetableUsecase),
        ),
      ) as _i5.TimetableUsecase);

  @override
  set timetableUsecase(_i5.TimetableUsecase? _timetableUsecase) =>
      super.noSuchMethod(
        Invocation.setter(
          #timetableUsecase,
          _timetableUsecase,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.FirebaseAuth get firebaseAuth => (super.noSuchMethod(
        Invocation.getter(#firebaseAuth),
        returnValue: _FakeFirebaseAuth_1(
          this,
          Invocation.getter(#firebaseAuth),
        ),
        returnValueForMissingStub: _FakeFirebaseAuth_1(
          this,
          Invocation.getter(#firebaseAuth),
        ),
      ) as _i3.FirebaseAuth);

  @override
  set firebaseAuth(_i3.FirebaseAuth? _firebaseAuth) => super.noSuchMethod(
        Invocation.setter(
          #firebaseAuth,
          _firebaseAuth,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set user(_i3.User? _user) => super.noSuchMethod(
        Invocation.setter(
          #user,
          _user,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get userId => (super.noSuchMethod(
        Invocation.getter(#userId),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#userId),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#userId),
        ),
      ) as String);

  @override
  set userId(String? _userId) => super.noSuchMethod(
        Invocation.setter(
          #userId,
          _userId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onError(_i9.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i10.Stream<Map<_i11.Week, Map<_i11.Period, _i14.ClassModel?>>> get stream =>
      (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i10
            .Stream<Map<_i11.Week, Map<_i11.Period, _i14.ClassModel?>>>.empty(),
        returnValueForMissingStub: _i10
            .Stream<Map<_i11.Week, Map<_i11.Period, _i14.ClassModel?>>>.empty(),
      ) as _i10.Stream<Map<_i11.Week, Map<_i11.Period, _i14.ClassModel?>>>);

  @override
  Map<_i11.Week, Map<_i11.Period, _i14.ClassModel?>> get state =>
      (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: <_i11.Week, Map<_i11.Period, _i14.ClassModel?>>{},
        returnValueForMissingStub: <_i11.Week,
            Map<_i11.Period, _i14.ClassModel?>>{},
      ) as Map<_i11.Week, Map<_i11.Period, _i14.ClassModel?>>);

  @override
  set state(Map<_i11.Week, Map<_i11.Period, _i14.ClassModel?>>? value) =>
      super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<_i11.Week, Map<_i11.Period, _i14.ClassModel?>> get debugState =>
      (super.noSuchMethod(
        Invocation.getter(#debugState),
        returnValue: <_i11.Week, Map<_i11.Period, _i14.ClassModel?>>{},
        returnValueForMissingStub: <_i11.Week,
            Map<_i11.Period, _i14.ClassModel?>>{},
      ) as Map<_i11.Week, Map<_i11.Period, _i14.ClassModel?>>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i10.Future<void> waitForInitialization() => (super.noSuchMethod(
        Invocation.method(
          #waitForInitialization,
          [],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  void fetchTimetable() => super.noSuchMethod(
        Invocation.method(
          #fetchTimetable,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.Future<void> deleteTimetable({required _i14.ClassModel? cls}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTimetable,
          [],
          {#cls: cls},
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<void> addTimetable({required _i14.ClassModel? cls}) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTimetable,
          [],
          {#cls: cls},
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  bool updateShouldNotify(
    Map<_i11.Week, Map<_i11.Period, _i14.ClassModel?>>? old,
    Map<_i11.Week, Map<_i11.Period, _i14.ClassModel?>>? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i9.RemoveListener addListener(
    _i12.Listener<Map<_i11.Week, Map<_i11.Period, _i14.ClassModel?>>>?
        listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
        returnValueForMissingStub: () {},
      ) as _i9.RemoveListener);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
