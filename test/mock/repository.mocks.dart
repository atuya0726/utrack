// Mocks generated by Mockito 5.4.4 from annotations
// in utrack/test/mock/repository.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:cloud_firestore/cloud_firestore.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:utrack/constants.dart' as _i10;
import 'package:utrack/model/class.dart' as _i4;
import 'package:utrack/model/task.dart' as _i9;
import 'package:utrack/model/user.dart' as _i7;
import 'package:utrack/repository/class.dart' as _i3;
import 'package:utrack/repository/task.dart' as _i8;
import 'package:utrack/repository/user.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCollectionReference_0<T extends Object?> extends _i1.SmartFake
    implements _i2.CollectionReference<T> {
  _FakeCollectionReference_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ClassRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockClassRepository extends _i1.Mock implements _i3.ClassRepository {
  MockClassRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CollectionReference<_i4.ClassModel> get docRef => (super.noSuchMethod(
        Invocation.getter(#docRef),
        returnValue: _FakeCollectionReference_0<_i4.ClassModel>(
          this,
          Invocation.getter(#docRef),
        ),
      ) as _i2.CollectionReference<_i4.ClassModel>);

  @override
  set docRef(_i2.CollectionReference<_i4.ClassModel>? _docRef) =>
      super.noSuchMethod(
        Invocation.setter(
          #docRef,
          _docRef,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<List<_i4.ClassModel>> fetchClasses() => (super.noSuchMethod(
        Invocation.method(
          #fetchClasses,
          [],
        ),
        returnValue: _i5.Future<List<_i4.ClassModel>>.value(<_i4.ClassModel>[]),
      ) as _i5.Future<List<_i4.ClassModel>>);

  @override
  _i5.Future<List<_i4.ClassModel>> fetchClassesByIds(
          {required List<String>? classIds}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchClassesByIds,
          [],
          {#classIds: classIds},
        ),
        returnValue: _i5.Future<List<_i4.ClassModel>>.value(<_i4.ClassModel>[]),
      ) as _i5.Future<List<_i4.ClassModel>>);

  @override
  _i5.Future<void> add(_i4.ClassModel? cls) => (super.noSuchMethod(
        Invocation.method(
          #add,
          [cls],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i6.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CollectionReference<_i7.UserModel> get docRef => (super.noSuchMethod(
        Invocation.getter(#docRef),
        returnValue: _FakeCollectionReference_0<_i7.UserModel>(
          this,
          Invocation.getter(#docRef),
        ),
      ) as _i2.CollectionReference<_i7.UserModel>);

  @override
  set docRef(_i2.CollectionReference<_i7.UserModel>? _docRef) =>
      super.noSuchMethod(
        Invocation.setter(
          #docRef,
          _docRef,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> makeUser({required String? userId}) => (super.noSuchMethod(
        Invocation.method(
          #makeUser,
          [],
          {#userId: userId},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<String>> userClasses({required String? userId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #userClasses,
          [],
          {#userId: userId},
        ),
        returnValue: _i5.Future<List<String>>.value(<String>[]),
      ) as _i5.Future<List<String>>);

  @override
  _i5.Future<void> addUserClass({
    required String? userId,
    required String? classId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addUserClass,
          [],
          {
            #userId: userId,
            #classId: classId,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteUserClass({
    required String? userId,
    required String? classId,
    required _i2.Transaction? transaction,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteUserClass,
          [],
          {
            #userId: userId,
            #classId: classId,
            #transaction: transaction,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i8.TaskRepository {
  MockTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CollectionReference<_i9.TaskModel> get docRef => (super.noSuchMethod(
        Invocation.getter(#docRef),
        returnValue: _FakeCollectionReference_0<_i9.TaskModel>(
          this,
          Invocation.getter(#docRef),
        ),
      ) as _i2.CollectionReference<_i9.TaskModel>);

  @override
  set docRef(_i2.CollectionReference<_i9.TaskModel>? _docRef) =>
      super.noSuchMethod(
        Invocation.setter(
          #docRef,
          _docRef,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> addTask({required _i9.TaskModel? task}) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [],
          {#task: task},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteTask({required String? taskId}) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [],
          {#taskId: taskId},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteTasks({
    required String? userId,
    required String? classId,
    required _i2.Transaction? transaction,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTasks,
          [],
          {
            #userId: userId,
            #classId: classId,
            #transaction: transaction,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updateTaskStatus({
    required String? taskId,
    required _i10.TaskStatus? status,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTaskStatus,
          [],
          {
            #taskId: taskId,
            #status: status,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i9.TaskModel>> getTasks({required String? userId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasks,
          [],
          {#userId: userId},
        ),
        returnValue: _i5.Future<List<_i9.TaskModel>>.value(<_i9.TaskModel>[]),
      ) as _i5.Future<List<_i9.TaskModel>>);
}
